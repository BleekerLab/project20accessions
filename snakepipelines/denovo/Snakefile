##############################################################################################################
# Produce de novo assembly of RNA-Seq reads + differential analysis + annotation of the assembled transcripts#
##############################################################################################################
import pandas as pd

#############
# Parameters
############@
# configuration file 
configfile: "config.yaml"

# get samples and units
samples = pd.read_table(config["samples"], index_col="sample")
units = pd.read_table(config["units"], index_col=["sample", "unit"], dtype=str)
units.index = units.index.set_levels([i.astype(str) for i in units.index.levels])  # enforce str in index
 
wildcard_constraints:
    sample = "[A-Za-z0-9]+"

wildcard_constraints:
    unit = "[0-9]+"
 

# working directory (files will be removed from here)
WORKING_DIR = config["working_dir"]
RESULT_DIR = config["result_dir"]

SAMPLES = samples.index.tolist()
UNITS = list(set(units.index.get_level_values("unit").tolist()))
print(UNITS)

##################
# Helper functions
##################
def get_fastq(wildcards):
    return units.loc[(wildcards.sample, wildcards.unit), ["fq1", "fq2"]].dropna()

###########
##  Outputs 
###########/home/mgalland/data/01_sequencing_runs/20171123_F1_lines_LA1777_PI127826_Cv/

MASTER_FILES = [RESULT_DIR + f for f in ["config.yaml","Snakefile"]]
TRIMMED = expand(WORKING_DIR + "trimmed/{sample}_{unit}.{read}.fastq.gz",sample=SAMPLES,unit=UNITS,read=["forward","reverse"])
TRINITY = expand(WORKING_DIR + "trinity/{sample}.trinity.fasta",sample=SAMPLES)
rule all:
	input:
		TRIMMED,
		TRINITY,
		MASTER_FILES
	message:"all done"

#####################
## Copy master files
####################
rule copy_master_files:
    input:
        "Snakefile",
        "config.yaml"
    output: 
        RESULT_DIR + "Snakefile",
        RESULT_DIR + "config.yaml"
    message:"copy master files to {RESULT_DIR}"
    shell:
        "cp {input} {RESULT_DIR}"

#####################################    
# de novo assembly of the reads
######################################
def get_trimmed_forward_sample_units(wildcards):
    return WORKING_DIR + "trimmed/" + wildcards.sample + "_*.forward.fastq.gz"

def get_trimmed_reverse_sample_units(wildcards):
    return WORKING_DIR + "trimmed/" + wildcards.sample + "_*.reverse.fastq.gz"

rule denovo:
    input:
        left =  expand(WORKING_DIR + "trimmed/{{sample}}_{unit}.forward.fastq.gz",unit=UNITS),
        right = expand(WORKING_DIR + "trimmed/{{sample}}_{unit}.reverse.fastq.gz",unit=UNITS)
    output:
        WORKING_DIR + "trinity/{sample}.trinity.fasta"
    message:"de novo assembly of {wildcards.sample} reads"
    params:
        outfile = WORKING_DIR + "trinity/{sample}_trinity_out.Trinity.fasta",
        assembly = config["trinity"]["assembly_params"],
        mem = config["trinity"]["maxmemory"]
    log:
        "trinity/assembly.log.txt"
    threads: 20
    shadow: "full"
    shell:
        "Trinity --seqType fq "
        "--left {input.left} "
        "--right {input.right} "
        "{params.assembly} "
        "--CPU {threads} "
        "--max_memory {params.mem} "
        "--output {params.outfile} "
        "2>{log};"
        "mv {params.outfile} {output}"

###########################
## Paired end read trimming
###########################
rule trimmomatic:
    input:
        get_fastq
    output:
        forward  = WORKING_DIR + "trimmed/{sample}_{unit}.forward.fastq.gz",
        reverse = WORKING_DIR + "trimmed/{sample}_{unit}.reverse.fastq.gz",
        forwardUnpaired  = temp(WORKING_DIR + "trimmed/{sample}_{unit}_forward_unpaired.fastq.gz"),
        reverseUnpaired = temp(WORKING_DIR + "trimmed/{sample}_{unit}_reverse_unpaired.fastq.gz")
    message:"Trimming Illumina {wildcards.sample} Illumina paired-end reads from {wildcards.unit}"
    params:
        seedMisMatches =            str(config['trimmomatic']['seedMisMatches']),
        palindromeClipTreshold =    str(config['trimmomatic']['palindromeClipTreshold']),
        simpleClipThreshhold =      str(config['trimmomatic']['simpleClipThreshold']),
        LeadMinTrimQual =           str(config['trimmomatic']['LeadMinTrimQual']),
        TrailMinTrimQual =          str(config['trimmomatic']['TrailMinTrimQual']),
        windowSize =                str(config['trimmomatic']['windowSize']),
        avgMinQual =                str(config['trimmomatic']['avgMinQual']),
        minReadLen =                str(config['trimmomatic']['minReadLength']),
        phred = 		    str(config["trimmomatic"]["phred"]),
        adapters = config["adapters"]
    threads: 10
    shell:
        "trimmomatic PE {params.phred} -threads {threads} "
        "{input} "
        "{output.forward} {output.forwardUnpaired} "
        "{output.reverse} {output.reverseUnpaired} "
        "ILLUMINACLIP:{params.adapters}:{params.seedMisMatches}:{params.palindromeClipTreshold}:{params.simpleClipThreshhold} "
        "LEADING:{params.LeadMinTrimQual} "
        "TRAILING:{params.TrailMinTrimQual} "
        "SLIDINGWINDOW:{params.windowSize}:{params.avgMinQual} "
        "MINLEN:{params.minReadLen}"          
