"""
This Snakemake pipeline will take sorted bam files (one per sample) and merge the BAM files that correspond to the same genotypes. 
Will also generate bedgraph and bigwig files from the merged BAM file.
"""
import os
import glob
import subprocess 
import pandas as pd

# config
configfile: "config.yaml"

# fastq directory
FQ_DIR = config["fastqdir"]

# chromosome sizes
CHROM_SIZES = config["refs"]["chromsizes"]

ACCESSIONS,REPLICATES, = glob_wildcards(FQ_DIR + "{accession}_{replicate}.fastq.gz")

#########
## Output
#########
MERGED_BAMS = expand("results/merged/{accession}.merged.bam",accession=ACCESSIONS)
BIGWIGS = expand("results/bigwigs/{accession}.sorted.bg.bw",accession=ACCESSIONS)

rule all:
	input:
		MERGED_BAMS,
		BIGWIGS
	message:"successfully merged BAM files"


###########################################
## Convert individual sample BAMs to BigWig
###########################################
rule bedgraph2bigwig:
    input:
        bedgraph = "results/bigwigs/{accession}.sorted.bg",
        sizes = "chromsizes.tab"
    output:
        "results/bigwigs/{accession}.sorted.bg.bw"
    shell:
        """
        for f in {input.bedgraph};
        do
            echo "converting $f file to bigwig format"
            bedGraphToBigWig $f {input.sizes} $f.bw
        done
        """

rule copy_chromosome_sizes:
    input:
        CHROM_SIZES
    output:
        temp("chromsizes.tab")
    shell:"cp {input} {output}"
        

rule bam2bedgraph:
    input:
        "results/merged/{accession}.merged.bam"
    output:
        temp("results/bigwigs/{accession}.sorted.bg")
    message:"converting {wildcards.accession} bam to bedgraph"
    params:
        "{accession}.bg"
    run:
        df = pd.read_csv(config["norm"],sep="\t",index_col=0)
        accession2normfactors = df.T.to_dict("list")
        # divide the scale factor by 1 to get the scaling factor
        scaling_factor = 1 / accession2normfactors[wildcards.accession][0]
        print("the {wildcards.accession} bedgraph file will be scaled by: " + str(scaling_factor))
        shell("bedtools genomecov -split -bg -scale " + str(scaling_factor) + " -ibam {input} > {params}")
        shell("bedSort {params} {output}")
        shell("rm {params}")


#########################################
## Merge bam files from the same genotype
#########################################

# to get wildcards for accessions
def get_bam_files(wildcards):
    "this function takes a list of bam files to merge. returns wildcards"
    return glob.glob("results/" + wildcards.accession + "_[0-9].bam")

rule merge_bams_from_same_accession:
    input:
        get_bam_files	
    output:
        "results/merged/{accession}.merged.bam"
    shell:
        "samtools merge -r {output} {input}"
    
