"""
This Snakemake pipeline will take sorted bam files (one per sample) and merge the BAM files that correspond to the same genotypes. 
Will also generate bedgraph and bigwig files from the merged BAM file.
"""
import os
import glob
import subprocess 

# config
configfile: "config.yaml"

# fastq directory
FQ_DIR = config["fastqdir"]

# chromosome sizes
CHROM_SIZES = config["refs"]["chromsizes"]

ACCESSIONS,REPLICATES, = glob_wildcards(FQ_DIR + "{accession}_{replicate}.fastq.gz")

#########
## Output
#########
MERGED_BAMS = expand("results/merged/{accession}.merged.bam",accession=ACCESSIONS)
BIGWIGS = expand("results/{accession}.bw",accession=ACCESSIONS)

rule all:
	input:
		MERGED_BAMS,
		BIGWIGS
	message:"successfully merged BAM files"


###########################################
## Convert individual sample BAMs to BigWig
###########################################
rule move_bigwigs:
    input:
        "results/bigwigs/{accession}.sorted.bg.bw"
    output:
        "results/{accession}.bw"
    shell:"mv {input} {output}"

rule bedgraph2bigwig:
    input:
        bedgraph = expand("results/bigwigs/{accession}.sorted.bg",accession=ACCESSIONS)
        sizes = "chromsizes.tab"
    output:
        expand("results/bigwigs/{accession}.sorted.bg.bw",accession=ACCESSIONS)
    message:"converting {wildcards.accession} bedgraph to bigwig"
    params:
        "results/bigwigs/"
    shell:
        """
        for f in results/bigwigs/*.sorted.bg
        do
            echo "converting $f file to bigwig format"
            bedGraphToBigWig $f {input.sizes} results/bigwigs/$f.bw
        done
        """

rule copy_chromosome_sizes:
    input:
        CHROM_SIZES
    output:
        temp("chromsizes.tab")
    shell:"cp {input} {output}"
        
#rule sort_bedgraph:
#    input:
 #       "{accession}.bg"
  #  output:
#        "results/bigwigs/{accession}.sorted.bg"
#    message:"sorting {input} file"
#    shell:
#        "bedSort {input} {output}"

rule bam2bedgraph:
    input:
        "results/merged/{accession}.merged.bam"
    output:
        temp("results/bigwigs/{accession}.sorted.bg")
    message:"converting {wildcards.accession} bam to bedgraph"
    params:
        "{accession}.bg"
    run:
        scaling_factor = subprocess.check_output("samtools view -F 0x904 -c " + input[0],shell=True)
        scaling_factor = scaling_factor.strip().decode()
        shell("bedtools genomecov -split -bg -scale " + str(scaling_factor) + " -ibam {input} > {params}")
        shell("bedSort {params} {output}")
        shell("rm {params}")


#########################################
## Merge bam files from the same genotype
#########################################

# to get wildcards for accessions
def get_bam_files(wildcards):
    "this function takes a list of bam files to merge. returns wildcards"
    return glob.glob("results/" + wildcards.accession + "_[0-9].bam")

rule merge_bams_from_same_accession:
    input:
        get_bam_files	
    output:
        "results/merged/{accession}.merged.bam"
    shell:
        "samtools merge -r {output} {input}"


#rule merge_bams_from_same_genotype:
#    input:
#        merge_bam_files
#    output:
#        "results/{accession}.bam"
#    message:"merging bam files for {wildcards.accession}"
#    shell: "samtools merge -r {output} {input}"      
