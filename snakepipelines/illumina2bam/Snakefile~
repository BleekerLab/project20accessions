

configfile: "config.yaml"

WORKING_DIR = config["workdir"]

FORWARD = expand(WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",sample=config["samples"].keys())
REVERSE = expand(WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz",sample=config["samples"].keys())     

def get_forward_files(wildcards):
    "get forward reads"
    return config["fastqdir"] + wildcards.sample + "/" + config["samples"][wildcards.sample]["left"]

def get_reverse_files(wildcards):
    "get reverse reads"
    return config["fastqdir"] + wildcards.sample + "/" + config["samples"][wildcards.sample]["right"]





rule all:
	input:
		FORWARD,
		REVERSE
   


# Trimmomatic
#rule trimmomatic:
#    input:
#        r1 = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["left"],
#        r2 = lambda wildcards: config["fastqdir"] + config["samples"][wildcards.sample]["right"],
#        adapters = config["adapters"]
#    output:
#        r1 = WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",
#        r2 = WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz",
#        r1_unpaired = WORKING_DIR + "trimmed/{sample}_forward_unpaired.fastq.gz",
#        r2_unpaired = WORKING_DIR + "trimmed/{sample}_reverse_unpaired.fastq.gz"
#    message: "trimming {wildcards.sample} reads"
#    wrapper:
#        "d9c0fe4/bio/trimmomatic/pe"

rule trimmomatic:
    input:
        r1 = get_forward_files,
        r2 = get_reverse_files,
        adapters = config["adapters"]
    output:
        r1 = WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",
        r2 = WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz",
        r1_unpaired = WORKING_DIR + "trimmed/{sample}_forward_unpaired.fastq.gz",
        r2_unpaired = WORKING_DIR + "trimmed/{sample}_reverse_unpaired.fastq.gz"
    message: "trimming {wildcards.sample} reads"
    wrapper:
        "d9c0fe4/bio/trimmomatic/pe"



