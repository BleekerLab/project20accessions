"""
Snakefile
"""
#############################
# Load pipeline configuration
#############################
configfile: "config.yaml"

WORKING_DIR = config["workdir"]
RESULT_DIR = config["resultdir"]
THREADS = config["threads"]


# Util functions
def get_forward_files(wildcards):
    "get forward reads"
    return config["fastqdir"] + config["samples"][wildcards.sample]["forward"]

def get_reverse_files(wildcards):
    "get reverse reads"
    return config["fastqdir"] + config["samples"][wildcards.sample]["reverse"]


#################
# Desired output
#################
#FORWARD = expand(WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",sample=config["samples"].keys())
#REVERSE = expand(WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz",sample=config["samples"].keys())     
BAMS = expand(RESULT_DIR + "{sample}_Aligned.sortedByCoord.out.bam",sample=config["samples"].keys())
BIGWIGS = expand(RESULT_DIR + "{sample}_Signal.{u}.bw",sample=config["samples"].keys(),u=["Unique","UniqueMultiple"])

rule all:
	input:
		BAMS,
		BIGWIGS
	message:"all done!"
   
#################
# Snakemake rules
#################

####################
# Saves master files
####################
rule copy_master_files_to_results:
    input:
        "Snakefile",
        "config.yaml",
        "environment.yaml"
    output:
        RESULT_DIR + "Snakefile",
        RESULT_DIR + "config.yaml",
        RESULT_DIR + "environment.yaml"
    message:"copy master files to {RESULT_DIR}" 
    shell:
        "cp {input} {RESULT_DIR}"

###################
# Convert to bigwig
###################
rule bedgraph2bigwig:
    input:
        bg = RESULT_DIR + "{sample}_Signal.{u}.str1.out.wig",
        chrom = config["refs"]["chromsizes"]
    output:
        RESULT_DIR + "{sample}_Signal.{u}.bw",
    message:"converting {input.bg} file to bigwig"
    shell:
        "wigToBigWig {input.bg} {input.chrom} {output}"
             
##########################
# STAR map reads to genome
##########################
rule map_to_genome_using_STAR:
    input:
        ref = [WORKING_DIR + "star2pass/"+f for f in ["chrLength.txt","chrNameLength.txt","chrName.txt","chrStart.txt","Genome","genomeParameters.txt","SA","SAindex"]],
        forward = WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",
        reverse = WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz"
    output:
        RESULT_DIR + "{sample}_Aligned.sortedByCoord.out.bam",
        RESULT_DIR + "{sample}_Aligned.sortedByCoord.out.bam.bai",
        RESULT_DIR + "{sample}_Log.final.out",
	RESULT_DIR + "{sample}_Signal.Unique.str1.out.wig",
        RESULT_DIR + "{sample}_Signal.UniqueMultiple.str1.out.wig"        
    message:"mapping {wildcards.sample} reads to genome"
    params:
        prefix = RESULT_DIR + "{sample}_",
        maxmismatches = config["star"]["mismatches"],
        unmapped = config["star"]["unmapped"]	,
        multimappers = config["star"]["multimappers"],
        matchNminoverLread = config["star"]["matchminoverlengthread"],
	outSamType = config["star"]["samtype"],
        outWigType = config["star"]["outwigtype"],
        outWigStrand = config["star"]["outwigstrand"],
        outWigNorm = config["star"]["outwignorm"],
        outSAMattributes = config["star"]["samattributes"],
        intronmax = config["star"]["intronmax"],
        matesgap =  config["star"]["matesgap"],
        genomeLoad = config["star"]["genomeload"],
        genomeram = config["star"]["genomeram"],
        genomedir = WORKING_DIR + "star2pass/"
    shell:
            "STAR --genomeDir {params.genomedir} "
            "--readFilesIn {input.forward} {input.reverse} "
            "--readFilesCommand zcat "
            "--outFilterMultimapNmax {params.multimappers} "
            "--outFilterMismatchNmax {params.maxmismatches} "
            "--alignMatesGapMax {params.matesgap} "
            "--alignIntronMax {params.intronmax} "
            "--outFilterMatchNminOverLread {params.matchNminoverLread} "
            "--alignEndsType EndToEnd "
            "--runThreadN {THREADS} "
            "--outReadsUnmapped {params.unmapped} "
            "--outFileNamePrefix {params.prefix} "
            "--outSAMtype {params.outSamType} "
            "--outWigType {params.outWigType} "
            "--outWigStrand {params.outWigStrand} "
            "--outWigNorm {params.outWigNorm} "
            "--outSAMattributes {params.outSAMattributes} "
            "--genomeLoad {params.genomeLoad} "
            "--limitGenomeGenerateRAM {params.genomeram};"
            "samtools index {output[0]}"

#####################################################################
## STAR 2-pass: genome indexing + splice junctions database generation 
#####################################################################
rule star2pass_index:
    input:
        sjdb = WORKING_DIR + "star1pass/SJ.concatenated.out.tab", 
        ref= config["refs"]["genome"],
        gtf = config["refs"]["gtf"]
    output:
        STAR_2PASS = [WORKING_DIR + "star2pass/"+ f for f in ["chrLength.txt","chrNameLength.txt","chrName.txt","chrStart.txt","Genome","genomeParameters.txt","SA","SAindex"]]
    message: "STAR 2nd pass: generating genome index"	
    params:
        WORKING_DIR + "star2pass/"
    shell:
        "STAR --runMode genomeGenerate "
        "--genomeDir {params} "
        "--genomeFastaFiles {input.ref} "
        "--runThreadN {THREADS} "
        "--sjdbFileChrStartEnd {input.sjdb} "
        "--sjdbOverhang 99 "
        "--sjdbGTFfile {input.gtf};"
        "touch -h {output}"

rule concatenate_sjdb:
    input:
        expand(WORKING_DIR + "star1pass/{sample}_SJ.out.tab",sample=config["samples"].keys()),
    output:
        WORKING_DIR + "star1pass/SJ.concatenated.out.tab"
    message:"concatenating splice junctions from different samples "
    shell:"cat {input} >> {output}"

rule star1pass_align:
    input:
        forward = WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",
        reverse = WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz",
        ref = WORKING_DIR + "star_index/"
    output:
        WORKING_DIR + "star1pass/{sample}_SJ.out.tab",
        temp(WORKING_DIR + "star1pass/{sample}_Aligned.out.sam")
    message:"STAR 1st pass: aligning {wildcards.sample} reads to generate splice junction files"
    params:
        WORKING_DIR + "star1pass/{sample}_"	
    shell: 		
        "STAR --runMode alignReads "
        "--genomeDir {input.ref} "
        "--readFilesIn {input.forward} {input.reverse} "
        "--outFileNamePrefix {params} "
        "--outFilterIntronMotifs RemoveNoncanonical "
        "--runThreadN {THREADS} "
        "--readFilesCommand zcat"

# sdjbOverhang specifies the length of the genomic sequence around the annotated junction to be used in constructing the splie junctions database. 
#Ideally this length should be equal to ReadLength-1
rule star_genome_index:
    input:
        genome = config["refs"]["genome"],
        gtf = config["refs"]["gtf"]
    output:
        WORKING_DIR + "star_index/"
    message:"generation STAR genome index" 
    params:
        WORKING_DIR + "star_index/"
    shell:
        "mkdir -p {params};"
        "STAR --runMode genomeGenerate "
        "--genomeDir {params} "
        "--genomeFastaFiles {input.genome} "
        "--runThreadN {THREADS} "
        "--sjdbOverhang 99 "
        "--sjdbGTFfile {input.gtf}"

###################
# QC after trimming
###################
rule fastqc_after_trimming:
    input:
        forward = WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",
        reverse = WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz"
    output:
        forward = RESULT_DIR + "fastqc_after_trimming/{sample}_forward.zip",
        reverse = RESULT_DIR + "fastqc_after_trimming/{sample}_reverse.zip"
    message:"FastQC check of {wildcards.sample} reads after trimming"
    params:
        dir = RESULT_DIR + "fastqc_after_trimming/"
    shell:
        "fastqc -o {params.dir} {input.forward} {input.reverse}"

######### 
#trimming
#########
rule trimmomatic:
    input:
        forward = get_forward_files,
        reverse = get_reverse_files,
        adapters = config["adapters"]
    output:
        forward = WORKING_DIR + "trimmed/{sample}_forward.fastq.gz",
        reverse = WORKING_DIR + "trimmed/{sample}_reverse.fastq.gz",
        forwardUnpaired = WORKING_DIR + "trimmed/{sample}_forward_unpaired.fastq.gz",
        reverseUnpaired = WORKING_DIR + "trimmed/{sample}_reverse_unpaired.fastq.gz"
    message: "trimming {wildcards.sample} reads"
    log:
        RESULT_DIR + "logs/trimmomatic/{sample}.log"
    params :
        seedMisMatches =            str(config['trimmomatic']['seedMisMatches']),
        palindromeClipTreshold =    str(config['trimmomatic']['palindromeClipTreshold']),
        simpleClipThreshhold =      str(config['trimmomatic']['simpleClipThreshold']),
        LeadMinTrimQual =           str(config['trimmomatic']['LeadMinTrimQual']),
        TrailMinTrimQual =          str(config['trimmomatic']['TrailMinTrimQual']),
        windowSize =                str(config['trimmomatic']['windowSize']),
        avgMinQual =                str(config['trimmomatic']['avgMinQual']),
        minReadLen =                str(config['trimmomatic']['minReadLength']),
        phred = 		    str(config["trimmomatic"]["phred"])
    shell:
        "trimmomatic PE {params.phred} -threads {THREADS} "
        "{input.forward} {input.reverse} "
        "{output.forward} {output.forwardUnpaired} "
        "{output.reverse} {output.reverseUnpaired} "
        "ILLUMINACLIP:{input.adapters}:{params.seedMisMatches}:{params.palindromeClipTreshold}:{params.simpleClipThreshhold} "
        "LEADING:{params.LeadMinTrimQual} "
        "TRAILING:{params.TrailMinTrimQual} "
        "SLIDINGWINDOW:{params.windowSize}:{params.avgMinQual} "
        "MINLEN:{params.minReadLen} 2>{log}"

####
# QC
####
rule fastqc_before_trimming:
    input:
        forward = get_forward_files,
        reverse = get_reverse_files
    output:
        forward = RESULT_DIR + "fastqc_before_trimming/{sample}_forward.zip",
        reverse = RESULT_DIR + "fastqc_before_trimming/{sample}_reverse.zip"
    message:"FastQC check of {wildcards.sample} reads before trimming"
    params:
        dir = RESULT_DIR + "fastqc_before_trimming/"
    shell:
        "fastqc -o {params.dir} {input.forward} {input.reverse}"
